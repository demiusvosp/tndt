framework:
    cache:
        # Put the unique name of your app here: the prefix seed
        # is used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The app cache caches to the filesystem by default.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # обычный кеш, в нем лежат данные полученные во время выполнения
        app: cache.adapter.filesystem

        # Namespaced pools use the above "app" backend by default
        pools:
            # системный кеш, хранит предварительно вычисленные данные, например плоскую иерархию полномочий
            cache.app.system:
                adapter: cache.adapter.system
            statistics.cache:
                adapter: cache.app

            doctrine.result_cache_pool:
                adapter: cache.app
            doctrine.system_cache_pool:
                adapter: cache.system

services:

    cache.permissions.adapter:
        class: 'Symfony\Component\Cache\Adapter\PhpArrayAdapter'
        public: false
        arguments:
            - '%kernel.cache_dir%/permissions_map.php'
            - '@cache.system'
# тег перемещает адаптер в пул, и работа с его кешем становится видна в дебаг-панельке, но зато больше не использует PhpArrayAdapter
# Когда лучше поймем устройство пулов и как в них попадают конкретные адаптеры, сделаем выделенный пул под это дело
#        tags:
#            - { name: 'cache.pool', namespace: 'permissions_map'}
